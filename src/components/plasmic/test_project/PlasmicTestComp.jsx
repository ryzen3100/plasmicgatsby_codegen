// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: gKYFiFEaidbWpCBEL1sEXD
// Component: OTaR58TdZI
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button2 from "../../Button2"; // plasmic-import: iC5yAa885Rb/component
import { useScreenVariants as useScreenVariantsxOLs94VmA6J } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: X-_OLs94vmA6J/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import * as projectcss from "./plasmic_test_project.module.css"; // plasmic-import: gKYFiFEaidbWpCBEL1sEXD/projectcss
import * as sty from "./PlasmicTestComp.module.css"; // plasmic-import: OTaR58TdZI/css
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: PoJnSSWU9bJ/icon
import Icon38Icon from "./icons/PlasmicIcon__Icon38"; // plasmic-import: CWABa-wst5A/icon
import imageYKsWpvoNmoI from "./images/image.svg"; // plasmic-import: YKs_wpvoNmoI/picture

export const PlasmicTestComp__VariantProps = new Array();

export const PlasmicTestComp__ArgProps = new Array();

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicTestComp__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsxOLs94VmA6J()
  });
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__xskI)}
      >
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__zx7KN)}
        >
          <p.PlasmicImg
            data-plasmic-name={"img"}
            data-plasmic-override={overrides.img}
            alt={""}
            className={classNames(sty.img)}
            displayHeight={"40px"}
            displayMaxHeight={"none"}
            displayMaxWidth={"none"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"40px"}
            src={{
              src: imageYKsWpvoNmoI,
              fullWidth: 150,
              fullHeight: 150,
              aspectRatio: 1
            }}
          />

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__mYUnl)}
          >
            <Button2
              className={classNames("__wab_instance", sty.button2__agi46)}
              color={"clear"}
              endIcon={
                <Icon38Icon
                  className={classNames(projectcss.all, sty.svg__rB9Ax)}
                  role={"img"}
                />
              }
              startIcon={
                <ChecksvgIcon
                  className={classNames(projectcss.all, sty.svg__udPx)}
                  role={"img"}
                />
              }
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__imJDz
                )}
              >
                {"Services"}
              </div>
            </Button2>
            <Button2
              className={classNames("__wab_instance", sty.button2__q0CEl)}
              color={"clear"}
              endIcon={
                <Icon38Icon
                  className={classNames(projectcss.all, sty.svg__eQoyP)}
                  role={"img"}
                />
              }
              startIcon={
                <ChecksvgIcon
                  className={classNames(projectcss.all, sty.svg__ujTdZ)}
                  role={"img"}
                />
              }
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__aw3Ez
                )}
              >
                {"Features"}
              </div>
            </Button2>
            <Button2
              className={classNames("__wab_instance", sty.button2__vy0T4)}
              color={"clear"}
              endIcon={
                <Icon38Icon
                  className={classNames(projectcss.all, sty.svg__xl24A)}
                  role={"img"}
                />
              }
              startIcon={
                <ChecksvgIcon
                  className={classNames(projectcss.all, sty.svg__p4BtI)}
                  role={"img"}
                />
              }
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__clgqE
                )}
              >
                {"Company"}
              </div>
            </Button2>
            <Button2
              className={classNames("__wab_instance", sty.button2__nZye7)}
              color={"clear"}
              endIcon={
                <Icon38Icon
                  className={classNames(projectcss.all, sty.svg__hdPZ)}
                  role={"img"}
                />
              }
              startIcon={
                <ChecksvgIcon
                  className={classNames(projectcss.all, sty.svg__lUkEc)}
                  role={"img"}
                />
              }
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__pHkPz
                )}
              >
                {"Contact"}
              </div>
            </Button2>
            <Button2
              className={classNames("__wab_instance", sty.button2__mWgrJ)}
              color={"clear"}
              endIcon={
                <Icon38Icon
                  className={classNames(projectcss.all, sty.svg__nOxyr)}
                  role={"img"}
                />
              }
              startIcon={
                <ChecksvgIcon
                  className={classNames(projectcss.all, sty.svg__yIimN)}
                  role={"img"}
                />
              }
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__mdKlp
                )}
              >
                {"Log in"}
              </div>
            </Button2>
            <Button2
              className={classNames("__wab_instance", sty.button2___8Voxf)}
              endIcon={
                <Icon38Icon
                  className={classNames(projectcss.all, sty.svg___3Dk)}
                  role={"img"}
                />
              }
              startIcon={
                <ChecksvgIcon
                  className={classNames(projectcss.all, sty.svg__l6Zuj)}
                  role={"img"}
                />
              }
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__iwL2M
                )}
              >
                {"Sign up"}
              </div>
            </Button2>
          </p.Stack>
          {false ? (
            <div className={classNames(projectcss.all, sty.freeBox__g0AT)}>
              <button
                data-plasmic-name={"button"}
                data-plasmic-override={overrides.button}
                className={classNames(
                  projectcss.all,
                  projectcss.button,
                  projectcss.__wab_text,
                  sty.button
                )}
              >
                {"Sign up"}
              </button>
              {true ? (
                <Button2
                  className={classNames("__wab_instance", sty.button2__nb5Lo)}
                  color={"clear"}
                  endIcon={
                    <Icon38Icon
                      className={classNames(projectcss.all, sty.svg__ckiMe)}
                      role={"img"}
                    />
                  }
                  startIcon={
                    <ChecksvgIcon
                      className={classNames(projectcss.all, sty.svg__dzTsp)}
                      role={"img"}
                    />
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__maYeU
                    )}
                  >
                    {"Log in"}
                  </div>
                </Button2>
              ) : null}
            </div>
          ) : null}
        </p.Stack>
      </p.Stack>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "img", "button"],
  img: ["img"],
  button: ["button"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicTestComp__ArgProps,
          internalVariantPropNames: PlasmicTestComp__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicTestComp__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTestComp";
  } else {
    func.displayName = `PlasmicTestComp.${nodeName}`;
  }
  return func;
}

export const PlasmicTestComp = Object.assign(
  // Top-level PlasmicTestComp renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    button: makeNodeComponent("button"),
    // Metadata about props expected for PlasmicTestComp
    internalVariantProps: PlasmicTestComp__VariantProps,
    internalArgProps: PlasmicTestComp__ArgProps
  }
);

export default PlasmicTestComp;
/* prettier-ignore-end */
