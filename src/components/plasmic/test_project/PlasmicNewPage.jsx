// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: gKYFiFEaidbWpCBEL1sEXD
// Component: aQBXEB_uGU
import * as React from "react";
import { Link } from "gatsby";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import TextInput from "../../TextInput"; // plasmic-import: AGj1qRwbjhO/component
import Button2 from "../../Button2"; // plasmic-import: iC5yAa885Rb/component
import { useScreenVariants as useScreenVariantsxOLs94VmA6J } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: X-_OLs94vmA6J/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import * as projectcss from "./plasmic_test_project.module.css"; // plasmic-import: gKYFiFEaidbWpCBEL1sEXD/projectcss
import * as sty from "./PlasmicNewPage.module.css"; // plasmic-import: aQBXEB_uGU/css
import Icon29Icon from "./icons/PlasmicIcon__Icon29"; // plasmic-import: wRgLaz1VkUr/icon
import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: dgDYEFDkePR/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: PoJnSSWU9bJ/icon
import image22Wh7EkjRv1F from "./images/image2.svg"; // plasmic-import: 2wh7ekjRV1f/picture

export const PlasmicNewPage__VariantProps = new Array();

export const PlasmicNewPage__ArgProps = new Array();

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

export function Head() {
  return <></>;
}

function PlasmicNewPage__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "textarea.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "name.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "name2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "name5.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "name3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "name4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],

    [$props, $ctx]
  );

  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsxOLs94VmA6J()
  });
  return (
    <React.Fragment>
      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__nzXs6)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__xkrke)}
            >
              {true ? (
                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__w5Gt
                  )}
                  component={Link}
                  platform={"gatsby"}
                >
                  <p.PlasmicImg
                    data-plasmic-name={"img"}
                    data-plasmic-override={overrides.img}
                    alt={""}
                    className={classNames(sty.img)}
                    displayHeight={"78px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"78px"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"100%"}
                    src={image22Wh7EkjRv1F}
                  />
                </p.PlasmicLink>
              ) : null}
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__lgTto)}
              >
                <p.Stack
                  as={p.PlasmicLink}
                  data-plasmic-name={"aboutUs"}
                  data-plasmic-override={overrides.aboutUs}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.aboutUs
                  )}
                  component={Link}
                  platform={"gatsby"}
                >
                  {false ? (
                    <Icon29Icon
                      className={classNames(projectcss.all, sty.svg__mV0Uw)}
                      role={"img"}
                    />
                  ) : null}
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__x2Qjw
                    )}
                  >
                    {"About Us"}
                  </div>
                  {false ? (
                    <Icon29Icon
                      className={classNames(projectcss.all, sty.svg__i8Bf)}
                      role={"img"}
                    />
                  ) : null}
                </p.Stack>
                <p.Stack
                  as={p.PlasmicLink}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__kpPfo
                  )}
                  component={Link}
                  platform={"gatsby"}
                >
                  {false ? (
                    <Icon29Icon
                      className={classNames(projectcss.all, sty.svg__twP5E)}
                      role={"img"}
                    />
                  ) : null}
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__kV4Wm
                    )}
                  >
                    {"Services"}
                  </div>
                  {false ? (
                    <Icon29Icon
                      className={classNames(projectcss.all, sty.svg___2Wa1S)}
                      role={"img"}
                    />
                  ) : null}
                </p.Stack>
                <p.Stack
                  as={p.PlasmicLink}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__r1K4B
                  )}
                  component={Link}
                  platform={"gatsby"}
                >
                  {false ? (
                    <Icon29Icon
                      className={classNames(projectcss.all, sty.svg__zjIe7)}
                      role={"img"}
                    />
                  ) : null}
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__rk4Nn
                    )}
                  >
                    {"Clients"}
                  </div>
                  {false ? (
                    <Icon29Icon
                      className={classNames(projectcss.all, sty.svg__bodR)}
                      role={"img"}
                    />
                  ) : null}
                </p.Stack>
                <p.Stack
                  as={p.PlasmicLink}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link___76EMm
                  )}
                  component={Link}
                  platform={"gatsby"}
                >
                  {false ? (
                    <Icon29Icon
                      className={classNames(projectcss.all, sty.svg__shuY)}
                      role={"img"}
                    />
                  ) : null}
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__tJwwx
                    )}
                  >
                    {"Blog"}
                  </div>
                  {false ? (
                    <Icon29Icon
                      className={classNames(projectcss.all, sty.svg__ibBgn)}
                      role={"img"}
                    />
                  ) : null}
                </p.Stack>
                <p.Stack
                  as={p.PlasmicLink}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link___0NsQy
                  )}
                  component={Link}
                  platform={"gatsby"}
                >
                  {false ? (
                    <Icon29Icon
                      className={classNames(projectcss.all, sty.svg__wkrhH)}
                      role={"img"}
                    />
                  ) : null}
                  <div
                    data-plasmic-name={"contact"}
                    data-plasmic-override={overrides.contact}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.contact
                    )}
                  >
                    {"Contact Us"}
                  </div>
                  {false ? (
                    <Icon29Icon
                      className={classNames(projectcss.all, sty.svg__ornbP)}
                      role={"img"}
                    />
                  ) : null}
                </p.Stack>
              </p.Stack>
            </p.Stack>
          </p.Stack>
          <div
            data-plasmic-name={"banner"}
            data-plasmic-override={overrides.banner}
            className={classNames(projectcss.all, sty.banner)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"foreground2"}
              data-plasmic-override={overrides.foreground2}
              hasGap={true}
              className={classNames(projectcss.all, sty.foreground2)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__tgt6F)}
              >
                <h1
                  data-plasmic-name={"h1"}
                  data-plasmic-override={overrides.h1}
                  className={classNames(
                    projectcss.all,
                    projectcss.h1,
                    projectcss.__wab_text,
                    sty.h1
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "Contact us"
                    : "Contact us"}
                </h1>
              </p.Stack>
            </p.Stack>
          </div>
          {true ? (
            <p.Stack
              as={"div"}
              data-plasmic-name={"clientsSection5"}
              data-plasmic-override={overrides.clientsSection5}
              hasGap={true}
              className={classNames(projectcss.all, sty.clientsSection5)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___2OwsG)}
              >
                <div className={classNames(projectcss.all, sty.columns__inU0D)}>
                  <div
                    className={classNames(projectcss.all, sty.column__jyYyz)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__autMx
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "Proactively architect worldwide sources, then globally implement enabled  users, then collaboratively innovate unique expertise, then continually  strategize excellent markets."
                        : "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s."}
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.column__ubVBo)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.columns__n6JNo)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__hAaAo
                        )}
                      >
                        <div
                          data-plasmic-name={"formWrapper"}
                          data-plasmic-override={overrides.formWrapper}
                          className={classNames(
                            projectcss.all,
                            sty.formWrapper
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.columns___9DmsS
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.column__xPcma
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__m0Bu8
                                )}
                              >
                                {"First name"}
                              </div>
                              {true ? (
                                <TextInput
                                  data-plasmic-name={"name"}
                                  data-plasmic-override={overrides.name}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.name
                                  )}
                                  endIcon={
                                    true ? (
                                      <ChecksvgIcon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg__qoO0
                                        )}
                                        role={"img"}
                                      />
                                    ) : null
                                  }
                                  onChange={(...eventArgs) => {
                                    p.generateStateOnChangeProp($state, [
                                      "name",
                                      "value"
                                    ])(
                                      (e => e.target?.value).apply(
                                        null,
                                        eventArgs
                                      )
                                    );
                                  }}
                                  placeholder={""}
                                  startIcon={
                                    <SearchsvgIcon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__ehBjU
                                      )}
                                      role={"img"}
                                    />
                                  }
                                  value={p.generateStateValueProp($state, [
                                    "name",
                                    "value"
                                  ])}
                                />
                              ) : null}
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.column__pad7M
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___2AFuQ
                                )}
                              >
                                {"Last name"}
                              </div>
                              <TextInput
                                data-plasmic-name={"name2"}
                                data-plasmic-override={overrides.name2}
                                className={classNames(
                                  "__wab_instance",
                                  sty.name2
                                )}
                                endIcon={
                                  <ChecksvgIcon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__bu4X5
                                    )}
                                    role={"img"}
                                  />
                                }
                                onChange={(...eventArgs) => {
                                  p.generateStateOnChangeProp($state, [
                                    "name2",
                                    "value"
                                  ])(
                                    (e => e.target?.value).apply(
                                      null,
                                      eventArgs
                                    )
                                  );
                                }}
                                placeholder={""}
                                startIcon={
                                  <SearchsvgIcon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg___9Kkaj
                                    )}
                                    role={"img"}
                                  />
                                }
                                value={p.generateStateValueProp($state, [
                                  "name2",
                                  "value"
                                ])}
                              />
                            </div>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.columns__h8Zy5
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.column___7X8X
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__oyj3V
                                )}
                              >
                                {"Email address"}
                              </div>
                              <TextInput
                                data-plasmic-name={"name5"}
                                data-plasmic-override={overrides.name5}
                                className={classNames(
                                  "__wab_instance",
                                  sty.name5
                                )}
                                endIcon={
                                  <ChecksvgIcon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__nt9U
                                    )}
                                    role={"img"}
                                  />
                                }
                                onChange={(...eventArgs) => {
                                  p.generateStateOnChangeProp($state, [
                                    "name5",
                                    "value"
                                  ])(
                                    (e => e.target?.value).apply(
                                      null,
                                      eventArgs
                                    )
                                  );
                                }}
                                placeholder={""}
                                startIcon={
                                  <SearchsvgIcon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__wvSz3
                                    )}
                                    role={"img"}
                                  />
                                }
                                value={p.generateStateValueProp($state, [
                                  "name5",
                                  "value"
                                ])}
                              />
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.column__coZgn
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__ke7Y1
                                )}
                              >
                                {"Phone number"}
                              </div>
                              <TextInput
                                data-plasmic-name={"name3"}
                                data-plasmic-override={overrides.name3}
                                className={classNames(
                                  "__wab_instance",
                                  sty.name3
                                )}
                                endIcon={
                                  <ChecksvgIcon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__bVwQ
                                    )}
                                    role={"img"}
                                  />
                                }
                                onChange={(...eventArgs) => {
                                  p.generateStateOnChangeProp($state, [
                                    "name3",
                                    "value"
                                  ])(
                                    (e => e.target?.value).apply(
                                      null,
                                      eventArgs
                                    )
                                  );
                                }}
                                placeholder={""}
                                startIcon={
                                  <SearchsvgIcon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__sh2Ik
                                    )}
                                    role={"img"}
                                  />
                                }
                                value={p.generateStateValueProp($state, [
                                  "name3",
                                  "value"
                                ])}
                              />
                            </div>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.columns__nfw6J
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.column__tHf0E
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__r6Dv1
                                )}
                              >
                                {"Company"}
                              </div>
                              <TextInput
                                data-plasmic-name={"name4"}
                                data-plasmic-override={overrides.name4}
                                className={classNames(
                                  "__wab_instance",
                                  sty.name4
                                )}
                                endIcon={
                                  <ChecksvgIcon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__eaJts
                                    )}
                                    role={"img"}
                                  />
                                }
                                onChange={(...eventArgs) => {
                                  p.generateStateOnChangeProp($state, [
                                    "name4",
                                    "value"
                                  ])(
                                    (e => e.target?.value).apply(
                                      null,
                                      eventArgs
                                    )
                                  );
                                }}
                                placeholder={""}
                                startIcon={
                                  <SearchsvgIcon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg___5RhiB
                                    )}
                                    role={"img"}
                                  />
                                }
                                value={p.generateStateValueProp($state, [
                                  "name4",
                                  "value"
                                ])}
                              />
                            </div>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.columns___6Rjpu
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.column__pugCt
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__eqezc
                                )}
                              >
                                {"Message"}
                              </div>
                              <textarea
                                data-plasmic-name={"textarea"}
                                data-plasmic-override={overrides.textarea}
                                className={classNames(
                                  projectcss.all,
                                  projectcss.textarea,
                                  sty.textarea
                                )}
                                onChange={e => {
                                  p.generateStateOnChangeProp($state, [
                                    "textarea",
                                    "value"
                                  ])(e.target.value);
                                }}
                                ref={ref => {
                                  $refs["textarea"] = ref;
                                }}
                                value={p.generateStateValueProp($state, [
                                  "textarea",
                                  "value"
                                ])}
                              />

                              {true ? (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__aYGgi
                                  )}
                                >
                                  <Button2
                                    data-plasmic-name={"button2"}
                                    data-plasmic-override={overrides.button2}
                                    className={classNames(
                                      "__wab_instance",
                                      sty.button2
                                    )}
                                    endIcon={
                                      <ChecksvgIcon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg__mj16
                                        )}
                                        role={"img"}
                                      />
                                    }
                                    startIcon={
                                      <ChecksvgIcon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg__tGGd
                                        )}
                                        role={"img"}
                                      />
                                    }
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text___54Ylm
                                      )}
                                    >
                                      {"Submit"}
                                    </div>
                                  </Button2>
                                </div>
                              ) : null}
                            </div>
                          </div>
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__we7Ej
                        )}
                      >
                        {true ? (
                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__sBWe9
                            )}
                          >
                            <h2
                              className={classNames(
                                projectcss.all,
                                projectcss.h2,
                                projectcss.__wab_text,
                                sty.h2__xUbB6
                              )}
                            >
                              {"Address"}
                            </h2>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__iIcyc
                              )}
                            >
                              {
                                "1234 Lorem Ipsum .\nLorem Ipsum , GA 30308\n1234567890"
                              }
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__aHwC
                              )}
                            >
                              {"xyz@companyname.com"}
                            </div>
                            <h4
                              data-plasmic-name={"h4"}
                              data-plasmic-override={overrides.h4}
                              className={classNames(
                                projectcss.all,
                                projectcss.h4,
                                projectcss.__wab_text,
                                sty.h4
                              )}
                            >
                              {"Address 2"}
                            </h4>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__phEyU
                              )}
                            >
                              {
                                "1234 Lorem Ipsum .\nLorem Ipsum , GA 30308\n1234567890"
                              }
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__lHbvx
                              )}
                            >
                              {"xyz@companyname.com"}
                            </div>
                          </p.Stack>
                        ) : null}
                      </div>
                    </p.Stack>
                  </div>
                </div>
              </p.Stack>
            </p.Stack>
          ) : null}
          <div
            data-plasmic-name={"footerTopSection"}
            data-plasmic-override={overrides.footerTopSection}
            className={classNames(projectcss.all, sty.footerTopSection)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__dsEQc)}>
              <div className={classNames(projectcss.all, sty.freeBox___1HoPe)}>
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"foreground3"}
                  data-plasmic-override={overrides.foreground3}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.foreground3)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__xBMwk)}
                  >
                    <h2
                      className={classNames(
                        projectcss.all,
                        projectcss.h2,
                        projectcss.__wab_text,
                        sty.h2__juKTt
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "Take your business to the next level"
                        : "Work with us."}
                    </h2>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ko1Gl
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "Rapidiously revolutionize future-proof niches, and authoritatively \nrestore user-centric e-markets."
                        : "Lorem Ipsum is simply dummy text of the printing and typesetting industry. "}
                    </div>
                  </p.Stack>
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__zdfYs)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__yLErI)}
                    >
                      <p.Stack
                        as={"button"}
                        data-plasmic-name={"button"}
                        data-plasmic-override={overrides.button}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          projectcss.button,
                          sty.button
                        )}
                      >
                        {false ? (
                          <Icon29Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__bz4G1
                            )}
                            role={"img"}
                          />
                        ) : null}
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ergDa
                          )}
                        >
                          {"Get IN Touch"}
                        </div>
                        {false ? (
                          <Icon29Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__xaNuu
                            )}
                            role={"img"}
                          />
                        ) : null}
                      </p.Stack>
                    </p.Stack>
                  </p.Stack>
                </p.Stack>
              </div>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__tkYQ)}>
            {true ? (
              <div className={classNames(projectcss.all, sty.freeBox__beXng)}>
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"rowWrapper"}
                  data-plasmic-override={overrides.rowWrapper}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.rowWrapper)}
                >
                  <div
                    data-plasmic-name={"colmn1"}
                    data-plasmic-override={overrides.colmn1}
                    className={classNames(projectcss.all, sty.colmn1)}
                  >
                    <h3
                      className={classNames(
                        projectcss.all,
                        projectcss.h3,
                        projectcss.__wab_text,
                        sty.h3__zCjee
                      )}
                    >
                      {"About us"}
                    </h3>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___8XYrM
                      )}
                    >
                      <React.Fragment>
                        <React.Fragment>
                          {
                            "© Company. All rights reserved. This site proudly built with "
                          }
                        </React.Fragment>
                        {
                          <p.PlasmicLink
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              projectcss.__wab_text,
                              projectcss.plasmic_default__inline,
                              sty.link__gcgaG
                            )}
                            component={Link}
                            href={"https://www.plasmic.app"}
                            platform={"gatsby"}
                          >
                            {"Plasmic"}
                          </p.PlasmicLink>
                        }

                        <React.Fragment>{"."}</React.Fragment>
                      </React.Fragment>
                    </div>
                  </div>
                  <div
                    data-plasmic-name={"colmn2"}
                    data-plasmic-override={overrides.colmn2}
                    className={classNames(projectcss.all, sty.colmn2)}
                  >
                    <h3
                      className={classNames(
                        projectcss.all,
                        projectcss.h3,
                        projectcss.__wab_text,
                        sty.h3__lxYgS
                      )}
                    >
                      {"Links"}
                    </h3>
                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link__mBdeu
                      )}
                      component={Link}
                      platform={"gatsby"}
                    >
                      {"Services"}
                    </p.PlasmicLink>
                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link__pcEt9
                      )}
                      component={Link}
                      platform={"gatsby"}
                    >
                      {"About us"}
                    </p.PlasmicLink>
                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link__xd15X
                      )}
                      component={Link}
                      href={"#"}
                      platform={"gatsby"}
                    >
                      {"Testimonials"}
                    </p.PlasmicLink>
                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link___46FiF
                      )}
                      component={Link}
                      href={"#"}
                      platform={"gatsby"}
                    >
                      {"Blog"}
                    </p.PlasmicLink>
                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link__mwiLc
                      )}
                      component={Link}
                      platform={"gatsby"}
                    >
                      {"Contact us\n"}
                    </p.PlasmicLink>
                  </div>
                  <div
                    data-plasmic-name={"colmn22"}
                    data-plasmic-override={overrides.colmn22}
                    className={classNames(projectcss.all, sty.colmn22)}
                  >
                    <h3
                      className={classNames(
                        projectcss.all,
                        projectcss.h3,
                        projectcss.__wab_text,
                        sty.h3__tyQjN
                      )}
                    >
                      {"Nav Links"}
                    </h3>
                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link__kR7T
                      )}
                      component={Link}
                      platform={"gatsby"}
                    >
                      {"Services"}
                    </p.PlasmicLink>
                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link__dRqpX
                      )}
                      component={Link}
                      platform={"gatsby"}
                    >
                      {"About us"}
                    </p.PlasmicLink>
                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link__kTnXs
                      )}
                      component={Link}
                      platform={"gatsby"}
                    >
                      {"Testimonials"}
                    </p.PlasmicLink>
                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link___2MpU0
                      )}
                      component={Link}
                      href={"#"}
                      platform={"gatsby"}
                    >
                      {"Blog"}
                    </p.PlasmicLink>
                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link__iiAjy
                      )}
                      component={Link}
                      platform={"gatsby"}
                    >
                      {"Contact us\n"}
                    </p.PlasmicLink>
                  </div>
                  <div
                    data-plasmic-name={"colmn3"}
                    data-plasmic-override={overrides.colmn3}
                    className={classNames(projectcss.all, sty.colmn3)}
                  >
                    <h3
                      className={classNames(
                        projectcss.all,
                        projectcss.h3,
                        projectcss.__wab_text,
                        sty.h3__nshS8
                      )}
                    >
                      {"Contact "}
                    </h3>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__sYh9V
                      )}
                    >
                      {"1234 Lorem Ipsum .\nLorem Ipsum , GA 30308"}
                    </div>
                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link__wN2P
                      )}
                      component={Link}
                      href={"#"}
                      platform={"gatsby"}
                    >
                      {"xyz@company.com"}
                    </p.PlasmicLink>
                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link___8NJcc
                      )}
                      component={Link}
                      href={"#"}
                      platform={"gatsby"}
                    >
                      {"1234567890"}
                    </p.PlasmicLink>
                  </div>
                </p.Stack>
              </div>
            ) : null}
          </div>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "img",
    "aboutUs",
    "contact",
    "banner",
    "foreground2",
    "h1",
    "clientsSection5",
    "formWrapper",
    "name",
    "name2",
    "name5",
    "name3",
    "name4",
    "textarea",
    "button2",
    "h4",
    "footerTopSection",
    "foreground3",
    "button",
    "rowWrapper",
    "colmn1",
    "colmn2",
    "colmn22",
    "colmn3"
  ],

  img: ["img"],
  aboutUs: ["aboutUs"],
  contact: ["contact"],
  banner: ["banner", "foreground2", "h1"],
  foreground2: ["foreground2", "h1"],
  h1: ["h1"],
  clientsSection5: [
    "clientsSection5",
    "formWrapper",
    "name",
    "name2",
    "name5",
    "name3",
    "name4",
    "textarea",
    "button2",
    "h4"
  ],

  formWrapper: [
    "formWrapper",
    "name",
    "name2",
    "name5",
    "name3",
    "name4",
    "textarea",
    "button2"
  ],

  name: ["name"],
  name2: ["name2"],
  name5: ["name5"],
  name3: ["name3"],
  name4: ["name4"],
  textarea: ["textarea"],
  button2: ["button2"],
  h4: ["h4"],
  footerTopSection: ["footerTopSection", "foreground3", "button"],
  foreground3: ["foreground3", "button"],
  button: ["button"],
  rowWrapper: ["rowWrapper", "colmn1", "colmn2", "colmn22", "colmn3"],
  colmn1: ["colmn1"],
  colmn2: ["colmn2"],
  colmn22: ["colmn22"],
  colmn3: ["colmn3"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicNewPage__ArgProps,
          internalVariantPropNames: PlasmicNewPage__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicNewPage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNewPage";
  } else {
    func.displayName = `PlasmicNewPage.${nodeName}`;
  }
  return func;
}

export const PlasmicNewPage = Object.assign(
  // Top-level PlasmicNewPage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    aboutUs: makeNodeComponent("aboutUs"),
    contact: makeNodeComponent("contact"),
    banner: makeNodeComponent("banner"),
    foreground2: makeNodeComponent("foreground2"),
    h1: makeNodeComponent("h1"),
    clientsSection5: makeNodeComponent("clientsSection5"),
    formWrapper: makeNodeComponent("formWrapper"),
    _name: makeNodeComponent("name"),
    name2: makeNodeComponent("name2"),
    name5: makeNodeComponent("name5"),
    name3: makeNodeComponent("name3"),
    name4: makeNodeComponent("name4"),
    textarea: makeNodeComponent("textarea"),
    button2: makeNodeComponent("button2"),
    h4: makeNodeComponent("h4"),
    footerTopSection: makeNodeComponent("footerTopSection"),
    foreground3: makeNodeComponent("foreground3"),
    button: makeNodeComponent("button"),
    rowWrapper: makeNodeComponent("rowWrapper"),
    colmn1: makeNodeComponent("colmn1"),
    colmn2: makeNodeComponent("colmn2"),
    colmn22: makeNodeComponent("colmn22"),
    colmn3: makeNodeComponent("colmn3"),
    // Metadata about props expected for PlasmicNewPage
    internalVariantProps: PlasmicNewPage__VariantProps,
    internalArgProps: PlasmicNewPage__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicNewPage;
/* prettier-ignore-end */
